#include<stdio.h>
#include<stdlib.h>
#define MAX 100

int binary_con(int quot[],int dividend)
{
    int ref=dividend,rem;
    int arr[MAX];
    int a=0,i=0,j;
    while(ref>0)
    {
        rem=ref%2;
        ref=ref/2;
        arr[i++]=rem;
    }
    for(j=i-1; j>=0; j--)
    quot[a++]=arr[j];
    return a;
}

void binary_con_1(int m_divs[],int divisor,int value)
{
    int num;
    int i,j;
    num=binary_con(m_divs,divisor);
    for(i=value-1,j=num-1; j>=0; i--,j--)
    m_divs[i]=m_divs[j];

    for(j=i; j>=0; j--)
    m_divs[j]=0;
}

void convert(char temp1[],char temp2[])
{
    int l,c;
    int i;
    l=strlen(temp1);
    for (i=l-1; i>=0; i--)
    {
        if (temp1[i]=='0')
        temp2[i]='1';

        else
        temp2[i]='0';
    }

    for(i=l-1; i>=0; i--)
    {
        if(i==l-1)
        {
            if(temp2[i]=='0')
            temp2[i]='1';

            else
            {
                temp2[i]='0';
                c=1;
            }
        }

        else
        {
            if(c==1 && temp2[i]=='0')
            {
                temp2[i]='1';
                c=0;
            }
            else if (c==1 &&temp2[i]=='1')
            {
                temp2[i]='0';
                c=1;
            }
        }
}

    temp2[l]='\0';
    /*printf("The 2's complement of divisor : %s",temp2);*/
}

void twos_com(int m_divs[],int m_divs_comp[],int value)
{
    char temp1[MAX],temp2[MAX];
    int i;
    for(i=0; i<value; i++)
    {
        if(m_divs[i]==0)
        temp1[i]='0';
        else if(m_divs[i]==1)
        temp1[i]='1';
    }
    temp1[i]='\0';
    /*printf("\n\ndivisor string :%s\n\n",temp1);*/
    convert(temp1,temp2);

    for(i=0; i<value; i++)
    {
        if(temp2[i]=='0')
        m_divs_comp[i]=0;
        else if(temp2[i]=='1')
        m_divs_comp[i]=1;
    }
}

void shift_left(int acc[],int quot[],int value)
{
    int i,j;
    for(i=0; i<value-1; i++)
    acc[i]=acc[i+1];
    acc[value-1]=quot[0];

    for(i=1; i<value; i++)
    quot[i-1]=quot[i];
}

void add(int temp1[],int temp2[],int value)
{
    int j;
    int c;
    /*char temp1[MAX],temp2[MAX];*/
    /*convert_string(arr1,temp1,value);
    convert_string(arr2,temp2,value);*/
    for(j=value-1; j>=0; j--)
    {
        if(j==value-1)
        {
            if((temp1[j]==0)&&(temp2[j]==0))
            {
                temp1[j]=0;
                c=0;
            }
            else if((temp1[j]==0)&&(temp2[j]==1))
            {
                temp1[j]=1;
                c=0;
            }
            else if((temp1[j]==1)&&(temp2[j]==0))
            {
                temp1[j]=1;
                c=0;
            }
            else if((temp1[j]==1)&&(temp2[j]==1))
            {
                temp1[j]=0;
                c=1;
            }
        }
        else
        {
            if((c==0)&&(temp1[j]==0)&&(temp2[j]==0))
            {
                temp1[j]=0;
                c=0;
            }
            else if((c==0)&&(temp1[j]==0)&&(temp2[j]==1))
            {
                temp1[j]=1;
                c=0;
            }
            else if((c==0)&&(temp1[j]==1)&&(temp2[j]==0))
            {
                temp1[j]=1;
                c=0;
            }
            else if((c==0)&&(temp1[j]==1)&&(temp2[j]==1))
            {
                temp1[j]=0;
                c=1;
            }
            else if((c==1)&&(temp1[j]==0)&&(temp2[j]==0))
            {
                temp1[j]=1;
                c=0;
            }
            else if((c==1)&&(temp1[j]==0)&&(temp2[j]==1))
            {
                temp1[j]=0;
                c=1;
            }
            else if((c==1)&&(temp1[j]==1)&&(temp2[j]==0))
            {
                temp1[j]=0;
                c=1;
            }
            else if((c==1)&&(temp1[j]==1)&&(temp2[j]==1))
            {
                temp1[j]=1;
                c=1;
            }
        }
    }
}

int main()
{
    /*char temp1[MAX],temp2[MAX];*/
    int acc[MAX],quot[MAX],m_divs[MAX],m_divs_comp[MAX];
    int dividend,divisor,value,flag1,flag2;
    int i,j;
    fflush(stdin);
    printf("enter the dividend and divisor\n");
    scanf("%d %d",&dividend,&divisor);
    value=binary_con(quot,dividend);

    /*printf("binary of dividend : ");
    for(i=0; i<value; i++)
    printf("%d",quot[i]);
    printf("\nvalue : %d",value);*/

    binary_con_1(m_divs,divisor,value);   //gives the integer array of that size

    /*printf("\n\ndivisor : ");
    for(i=0; i<value; i++)
    printf("%d",m_divs[i]);*/

    twos_com(m_divs,m_divs_comp,value);   //gives the integer array of 2's complement by the aid of strings

    /*printf("two's complement of divisor : ");
    for(i=0; i<value; i++)
    printf("%d",m_divs_comp[i]);*/

    for(i=0; i<value; i++)
    acc[i]=0;

    for(i=value; i>0; i--)
    {
        flag1=acc[0];
        shift_left(acc,quot,value);
        /*printf("acc : ");
        for(j=0; j<value; j++)
        printf("%d",acc[j]);
        printf("\nquotient : ");
        for(j=0; j<value; j++)
        printf("%d",quot[j]);
        exit(1);*/

        if(flag1==0)
        add(acc,m_divs_comp,value);
        else if(flag1==1)
        add(acc,m_divs,value);

        flag2=acc[0];
        if(flag2==0)
        quot[value-1]=1;
        else if(flag2==1)
        quot[value-1]=0;

        /*printf("acc :");
        for(i=0; i<value; i++)
        printf("%d",acc[i]);
        printf("\nquot :");
        for(i=0; i<value; i++)
        printf("%d",quot[i]);
        exit(1);*/

        if(flag1==0)
        {
            printf("\n\nstep : %d  here Acc>0\noperations performed are left shift and A=A-M\n",value-i+1);
            printf("accumulator : ");
            for(j=0; j<value; j++)
            printf("%d",acc[j]);
            printf("\nquotient register : ");
            for(j=0; j<value; j++)
            printf("%d",quot[j]);
        }
        else if((flag1==1))
        {
            printf("\n\nstep : %d  here Acc<0\noperations performed are left shift and A=A+M\n",value-i+1);
            printf("accumulator : ");
            for(j=0; j<value; j++)
            printf("%d",acc[j]);
            printf("\nquotient register : ");
            for(j=0; j<value; j++)
            printf("%d",quot[j]);
        }
    }
    if(acc[0]==1)
    {
        printf("\n\nHERE ACC < 0 , HENCE LAST STEP IS A=A+M\n");
        add(acc,m_divs,value);
    }

    printf("\n\nfinal answer : \n");
    printf("ACC - > remainder : ");
    for(i=0; i<value; i++)
    printf("%d",acc[i]);
    printf(" which is the decimal equivalent of %d",dividend%divisor);
    printf("\n\nQUOTIENT - > :");
    for(i=0; i<value; i++)
    printf("%d",quot[i]);
    printf(" which is the decimal equivalent of %d\n\n",dividend/divisor);

    return 0;
}
